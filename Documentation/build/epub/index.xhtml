<!DOCTYPE html>


<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    
    <title>Welcome to Calculatorâ€™s documentation!</title>
    
    <link rel="stylesheet" href="_static/epub.css" type="text/css" />
    <link rel="stylesheet" href="_static/pygments.css" type="text/css" /> 
  </head>
  <body role="document">

    <div class="document">
      <div class="documentwrapper">
          <div class="body" role="main">
            
  <div class="section" id="welcome-to-calculator-s-documentation">
<h1>Welcome to Calculator&#8217;s documentation!</h1>
<div class="toctree-wrapper compound">
</div>
<table border="1" class="docutils">
<colgroup>
<col width="33%" />
<col width="33%" />
<col width="33%" />
</colgroup>
<tbody valign="top">
<tr class="row-odd"><td><div class="align-center first last figure">
<img alt="alternate text" src="_images/LogoICTP.jpeg" style="width: 200px; height: 200px;" />
</div>
</td>
<td><div class="align-center first last figure">
<img alt="alternate text" src="_images/Calculator1.jpeg" style="width: 200px; height: 200px;" />
</div>
</td>
<td><div class="align-center first last figure">
<img alt="alternate text" src="_images/LogoICTP.jpeg" style="width: 200px; height: 200px;" />
</div>
</td>
</tr>
</tbody>
</table>
</div>
<div class="section" id="introduction">
<h1>Introduction</h1>
<div class="section" id="id1">
<h2>Introduction</h2>
<div class="align-center figure">
<img alt="alternate text" src="_images/Calculator1.jpeg" style="width: 200px; height: 200px;" />
</div>
<p><strong>Calculator</strong> is a C++ progamm to solve basic mathematical expressions. It can solve  basic mathematical expressions containing <code class="docutils literal"><span class="pre">+</span></code>, <code class="docutils literal"><span class="pre">-</span></code>, <code class="docutils literal"><span class="pre">*</span></code>, <code class="docutils literal"><span class="pre">/</span></code>, <code class="docutils literal"><span class="pre">**</span></code>, and <code class="docutils literal"><span class="pre">()</span></code>. The development version of the package is available on <a class="reference external" href="https://github.com/MYaseen208/Calculator">Github</a><span class="link-target"> [https://github.com/MYaseen208/Calculator]</span>.</p>
<div class="section" id="code-for-main-function">
<h3>Code for Main Function</h3>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="c1">#include &lt;iostream&gt;</span>
<span class="c1">#include &quot;tokenizer.h&quot;</span>
<span class="c1">#include &quot;parser.h&quot;</span>

<span class="n">using</span> <span class="n">std</span><span class="p">::</span><span class="n">cout</span><span class="p">;</span>
<span class="n">using</span> <span class="n">std</span><span class="p">::</span><span class="n">endl</span><span class="p">;</span>
<span class="n">using</span> <span class="n">namespace</span> <span class="n">std</span><span class="p">;</span>

<span class="nb">int</span> <span class="n">main</span> <span class="p">()</span> <span class="p">{</span>
  <span class="n">Tokenizer</span> <span class="n">tokenizer</span><span class="p">;</span>
  <span class="n">std</span><span class="p">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Token</span><span class="o">&gt;</span> <span class="n">res</span> <span class="o">=</span> <span class="n">tokenizer</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;1+2*3&quot;</span><span class="p">);</span>
 <span class="o">//</span> <span class="k">for</span> <span class="p">(</span><span class="n">Token</span> <span class="n">token</span> <span class="p">:</span> <span class="n">res</span><span class="p">)</span> <span class="p">{</span>
 <span class="o">//</span>   <span class="n">std</span><span class="p">::</span><span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">token</span><span class="o">.</span><span class="n">val</span> <span class="o">&lt;&lt;</span> <span class="n">std</span><span class="p">::</span><span class="n">endl</span><span class="p">;</span>
 <span class="o">//</span> <span class="p">}</span>
  <span class="n">Parser</span> <span class="n">parse</span><span class="p">;</span>
  <span class="n">double</span> <span class="n">result</span> <span class="o">=</span> <span class="n">parse</span><span class="o">.</span><span class="n">expression</span><span class="p">(</span><span class="n">res</span><span class="p">);</span>
  <span class="n">cout</span> <span class="o">&lt;&lt;</span> <span class="n">result</span> <span class="o">&lt;&lt;</span> <span class="n">endl</span><span class="p">;</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="code-for-tokenizer-function">
<h3>Code for Tokenizer Function</h3>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="c1">#include &quot;tokenizer.h&quot;</span>
<span class="c1">#include &lt;iostream&gt;</span>

<span class="n">std</span><span class="p">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Token</span><span class="o">&gt;</span> <span class="n">Tokenizer</span><span class="p">::</span><span class="n">split</span> <span class="p">(</span><span class="n">std</span><span class="p">::</span><span class="n">string</span> <span class="nb">str</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">std</span><span class="p">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Token</span><span class="o">&gt;</span> <span class="n">result</span><span class="p">;</span>
  <span class="k">for</span> <span class="p">(</span><span class="nb">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="nb">str</span><span class="o">.</span><span class="n">length</span><span class="p">();</span> <span class="o">++</span><span class="n">i</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">char</span> <span class="n">c</span> <span class="o">=</span> <span class="nb">str</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">==</span><span class="s1">&#39;+&#39;</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">std</span><span class="p">::</span><span class="n">string</span> <span class="n">op</span><span class="p">;</span>
      <span class="n">op</span> <span class="o">+=</span> <span class="n">c</span><span class="p">;</span>
      <span class="n">result</span><span class="o">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">Token</span><span class="p">(</span><span class="n">PLUS</span><span class="p">,</span><span class="n">op</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">==</span><span class="s1">&#39;-&#39;</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">std</span><span class="p">::</span><span class="n">string</span> <span class="n">op</span><span class="p">;</span>
      <span class="n">op</span> <span class="o">+=</span> <span class="n">c</span><span class="p">;</span>
      <span class="n">result</span><span class="o">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">Token</span><span class="p">(</span><span class="n">MINUS</span><span class="p">,</span><span class="n">op</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">==</span><span class="s1">&#39;*&#39;</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">std</span><span class="p">::</span><span class="n">string</span> <span class="n">op</span><span class="p">;</span>
      <span class="n">op</span> <span class="o">+=</span> <span class="n">c</span><span class="p">;</span>
      <span class="n">result</span><span class="o">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">Token</span><span class="p">(</span><span class="n">STAR</span><span class="p">,</span><span class="n">op</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">c</span><span class="o">==</span><span class="s1">&#39;/&#39;</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">std</span><span class="p">::</span><span class="n">string</span> <span class="n">op</span><span class="p">;</span>
      <span class="n">op</span> <span class="o">+=</span> <span class="n">c</span><span class="p">;</span>
      <span class="n">result</span><span class="o">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">Token</span><span class="p">(</span><span class="n">SLASH</span><span class="p">,</span><span class="n">op</span><span class="p">));</span>
    <span class="p">}</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">isblank</span><span class="p">(</span><span class="n">c</span><span class="p">))</span> <span class="k">continue</span><span class="p">;</span>
    <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">isdigit</span><span class="p">(</span><span class="n">c</span><span class="p">))</span>
    <span class="p">{</span>
      <span class="n">std</span><span class="p">::</span><span class="n">string</span> <span class="n">number</span><span class="p">;</span>
      <span class="k">while</span><span class="p">(</span><span class="n">isdigit</span><span class="p">(</span><span class="nb">str</span><span class="p">[</span><span class="n">i</span><span class="p">]))</span> <span class="n">number</span><span class="o">+=</span><span class="nb">str</span><span class="p">[</span><span class="n">i</span><span class="o">++</span><span class="p">];</span>
      <span class="n">result</span><span class="o">.</span><span class="n">push_back</span><span class="p">(</span><span class="n">Token</span><span class="p">(</span><span class="n">NUMERIC</span><span class="p">,</span><span class="n">number</span><span class="p">));</span>
      <span class="n">i</span><span class="o">--</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="k">else</span> 
      <span class="n">std</span><span class="p">::</span><span class="n">cout</span><span class="o">&lt;&lt;</span><span class="s2">&quot;Unknown character&quot;</span><span class="o">&lt;&lt;</span><span class="n">std</span><span class="p">::</span><span class="n">endl</span><span class="p">;</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>
</pre></div>
</div>
</div>
<div class="section" id="code-for-parser-function">
<h3>Code for Parser Function</h3>
<div class="highlight-default"><div class="highlight"><pre><span></span><span class="c1">#include &quot;tokenizer.h&quot;  </span>
<span class="c1">#include &quot;parser.h&quot;</span>


<span class="n">double</span> <span class="n">Parser</span><span class="p">::</span><span class="n">factor</span><span class="p">(</span><span class="n">std</span><span class="p">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Token</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">)</span>
<span class="p">{</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="n">counter</span><span class="p">]</span><span class="o">.</span><span class="n">kind</span> <span class="o">==</span> <span class="n">NUMERIC</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="k">return</span> <span class="n">stod</span> <span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="n">counter</span><span class="p">]</span><span class="o">.</span><span class="n">val</span><span class="p">);</span>
  <span class="p">}</span>
<span class="o">//</span>  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="n">counter</span><span class="p">]</span><span class="o">.</span><span class="n">kind</span> <span class="o">==</span> <span class="s1">&#39;(&#39;</span><span class="p">)</span>
<span class="o">//</span>   <span class="p">{</span>
<span class="o">//</span>     <span class="n">counter</span><span class="o">++</span><span class="p">;</span> <span class="o">//</span> <span class="s1">&#39;(&#39;</span>
<span class="o">//</span>     <span class="n">double</span> <span class="n">result</span> <span class="o">=</span> <span class="n">expression</span><span class="p">(</span><span class="n">res</span><span class="p">);</span>
<span class="o">//</span>     <span class="n">counter</span><span class="o">++</span><span class="p">;</span> <span class="o">//</span> <span class="s1">&#39;)&#39;</span>
<span class="o">//</span>     <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="o">//</span>   <span class="p">}</span>
  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="n">counter</span><span class="p">]</span><span class="o">.</span><span class="n">kind</span> <span class="o">==</span> <span class="n">MINUS</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">counter</span><span class="o">++</span><span class="p">;</span>
    <span class="k">return</span> <span class="o">-</span><span class="n">expression</span><span class="p">(</span><span class="n">res</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="n">counter</span><span class="p">]</span><span class="o">.</span><span class="n">kind</span> <span class="o">==</span> <span class="n">PLUS</span><span class="p">)</span>
  <span class="p">{</span>
    <span class="n">counter</span><span class="o">++</span><span class="p">;</span>
    <span class="k">return</span> <span class="o">+</span><span class="n">expression</span><span class="p">(</span><span class="n">res</span><span class="p">);</span>
  <span class="p">}</span>
  <span class="k">else</span>
    <span class="k">return</span> <span class="mi">0</span><span class="p">;</span> <span class="o">//</span> <span class="n">error</span>
<span class="p">}</span>

<span class="n">double</span> <span class="n">Parser</span><span class="p">::</span><span class="n">term</span><span class="p">(</span><span class="n">std</span><span class="p">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Token</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">double</span> <span class="n">result</span> <span class="o">=</span> <span class="n">factor</span><span class="p">(</span><span class="n">res</span><span class="p">);</span>
  <span class="n">counter</span><span class="o">++</span><span class="p">;</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="n">counter</span><span class="p">]</span><span class="o">.</span><span class="n">kind</span> <span class="o">==</span> <span class="n">STAR</span> <span class="o">||</span> <span class="n">res</span><span class="p">[</span><span class="n">counter</span><span class="p">]</span><span class="o">.</span><span class="n">kind</span> <span class="o">==</span> <span class="n">SLASH</span><span class="p">)</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="n">counter</span><span class="p">]</span><span class="o">.</span><span class="n">kind</span> <span class="o">==</span> <span class="n">STAR</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">counter</span><span class="o">++</span><span class="p">;</span>
      <span class="n">result</span> <span class="o">*=</span> <span class="n">factor</span><span class="p">(</span><span class="n">res</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
      <span class="n">counter</span><span class="o">++</span><span class="p">;</span>
      <span class="n">result</span> <span class="o">/=</span> <span class="n">factor</span><span class="p">(</span><span class="n">res</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>

<span class="n">double</span> <span class="n">Parser</span><span class="p">::</span><span class="n">expression</span><span class="p">(</span><span class="n">std</span><span class="p">::</span><span class="n">vector</span><span class="o">&lt;</span><span class="n">Token</span><span class="o">&gt;</span> <span class="n">res</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">double</span> <span class="n">result</span> <span class="o">=</span> <span class="n">term</span><span class="p">(</span><span class="n">res</span><span class="p">);</span>
<span class="o">//</span>   <span class="n">counter</span><span class="o">++</span><span class="p">;</span>
  <span class="k">while</span> <span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="n">counter</span><span class="p">]</span><span class="o">.</span><span class="n">kind</span> <span class="o">==</span> <span class="n">PLUS</span> <span class="o">||</span> <span class="n">res</span><span class="p">[</span><span class="n">counter</span><span class="p">]</span><span class="o">.</span><span class="n">kind</span> <span class="o">==</span> <span class="n">MINUS</span><span class="p">)</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">res</span><span class="p">[</span><span class="n">counter</span><span class="p">]</span><span class="o">.</span><span class="n">kind</span> <span class="o">==</span> <span class="n">PLUS</span><span class="p">)</span>
    <span class="p">{</span>
      <span class="n">counter</span><span class="o">++</span><span class="p">;</span>
      <span class="n">result</span> <span class="o">+=</span> <span class="n">term</span><span class="p">(</span><span class="n">res</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">else</span>
    <span class="p">{</span>
      <span class="n">counter</span><span class="o">++</span><span class="p">;</span>
      <span class="n">result</span> <span class="o">-=</span> <span class="n">term</span><span class="p">(</span><span class="n">res</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
<span class="p">}</span>

</pre></div>
</div>
<p>Third test.</p>
<div class="math">
<p><img src="_images/math/bb522f2350d34d2f58ed9877a04d889bb4d74594.png" alt="\frac{ \sum_{t=0}^{N}f(t,k) }{N}"/></p>
</div><p>and inline math <img class="math" src="_images/math/ba8f2d3e7cdf5ca8dbaee2cbeb4ace4b4f4bf2bb.png" alt="\frac{ \sum_{t=0}^{N}f(t,k) }{N}"/>.</p>
</div>
</div>
</div>
<div class="section" id="indices-and-tables">
<h1>Indices and tables</h1>
<ul class="simple">
<li><a class="reference internal" href="genindex.xhtml"><span class="std std-ref">Index</span></a></li>
<li><a class="reference internal" href="py-modindex.xhtml"><span class="std std-ref">Module Index</span></a></li>
<li><a class="reference internal" href="search.xhtml"><span class="std std-ref">Search Page</span></a></li>
</ul>
</div>


          </div>
      </div>
      <div class="clearer"></div>
    </div>
  </body>
</html>